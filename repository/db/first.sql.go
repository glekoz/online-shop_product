// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: first.sql

package db

import (
	"context"
)

const create = `-- name: Create :exec

INSERT INTO products(id, name, price, description)
VALUES ($1, $2, $3, $4)
`

type CreateParams struct {
	ID          string
	Name        string
	Price       int32
	Description string
}

// Я использую pgx, в котором если не найдена строка
// при запросе одной строки, то возвращается ошибка;
// а если запрашивается несколько строк и не возвращается
// ни одной, то ошибки нет - будет пустой срез.
func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
	)
	return err
}

const get = `-- name: Get :one
SELECT name, price, description
FROM products
WHERE id = $1
`

type GetRow struct {
	Name        string
	Price       int32
	Description string
}

func (q *Queries) Get(ctx context.Context, id string) (GetRow, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i GetRow
	err := row.Scan(&i.Name, &i.Price, &i.Description)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT id, name, price
FROM products
`

type GetAllRow struct {
	ID    string
	Name  string
	Price int32
}

func (q *Queries) GetAll(ctx context.Context) ([]GetAllRow, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRow
	for rows.Next() {
		var i GetAllRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
